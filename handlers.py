import os
from dotenv import load_dotenv
from aiogram import types, Router, F
from aiogram.filters import CommandStart, Command
from aiogram.types import (InlineKeyboardButton, InlineKeyboardMarkup,
                           LabeledPrice, PreCheckoutQuery, ContentType, InputFile, FSInputFile)
from db import User, Key, add_user
from datetime import date, timedelta
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import json
from config import (iphone_pref, android_pref, image_path_iphone,
                    image_path_android1, image_path_android2, main_info, pay_amounts, PAYMENT_PROVIDER_TOKEN,
                    PAYMENT_OPTIONS)
from kb import keyboard_main, tel_pref, back_button, keyboard_pay

rt = Router()

load_dotenv()
ADMIN_ID = os.getenv("admin_id")


class HelpState(StatesGroup):
    waiting_for_question = State()
    waiting_for_admin_reply = State()


@rt.message(CommandStart())
async def start_cmd(message: types.Message):
    user_name = f"@{message.from_user.username}" if message.from_user.username else "Noname"
    tg_id = message.from_user.id  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_phone = message.contact.phone_number if message.contact else None
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    existing_user = User.get_or_none(User.tg_id == tg_id)

    if existing_user:
        print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {tg_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        balance = existing_user.balance
    else:
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            add_user(nickname=user_name, tg_id=tg_id, user_phone=user_phone, registration_date="", payment_date="")
            balance = 0
            await message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–µ—Ä–≤–∏—Å <b>FamilyNet</b>\n'
                                 '–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ Youtube –∏ –Ω–µ —Ç–æ–ª—å–∫–æüòâ'
                                 '–°—Ç–æ–∏–º–æ—Å—Ç—å 1 –º–µ—Å—è—Ü –ø–æ–¥–ø–∏—Å–∫–∏ 100 —Ä—É–±.', parse_mode='HTML')
            await message.answer(main_info, parse_mode='HTML')
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            if ADMIN_ID:
                try:
                    admin_message = f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö:\n\n" \
                                    f"–ù–∏–∫–Ω–µ–π–º: {user_name}\n" \
                                    f"ID: {tg_id}\n" \
                                    f"–¢–µ–ª–µ—Ñ–æ–Ω: {user_phone}\n"
                    await message.bot.send_message(ADMIN_ID, admin_message)
                    print(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É: {admin_message}")
                except Exception as e:
                    print(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {e}")
            else:
                print("‚ö† ADMIN_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")

        except Exception as e:
            print(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {e}")
            balance = 0  # –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, —Å—Ç–∞–≤–∏–º –±–∞–ª–∞–Ω—Å –≤ 0

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    await message.answer(
        f"üí∞ –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance}‚ÇΩ",
        reply_markup=keyboard_main
    )


@rt.callback_query(F.data == "get_key")
async def process_get_key(callback_query: types.CallbackQuery):
    await callback_query.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏

    tg_id = callback_query.from_user.id  # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_entry = User.get_or_none(User.tg_id == tg_id)

    if not user_entry:
        await callback_query.message.answer("‚ö† –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_entry.balance < 100:
        await callback_query.message.edit_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª—é—á–∞.",
                                               reply_markup=back_button)
        return

    # –ò—â–µ–º –ø–µ—Ä–≤—ã–π —Å–≤–æ–±–æ–¥–Ω—ã–π –∫–ª—é—á
    key_entry = Key.get_or_none((Key.comments.is_null(True)) | (Key.comments == ""))

    if key_entry:
        # –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–ª—é—á–∞
        today = date.today()
        payment_date = today + timedelta(days=30)

        key_entry.comments = str(tg_id)  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        key_entry.date_of_issue = today  # –î–∞—Ç–∞ –≤—ã–¥–∞—á–∏
        key_entry.payment_date = payment_date  # –î–∞—Ç–∞ –ø–ª–∞—Ç–µ–∂–∞
        key_entry.save()

        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_entry.balance -= 100
        user_entry.save()

        if user_entry.key_id:
            try:
                key_list = json.loads(user_entry.key_id)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É JSON –≤ —Å–ø–∏—Å–æ–∫
            except json.JSONDecodeError:
                key_list = []  # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞, —Å–æ–∑–¥–∞—ë–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
        else:
            key_list = []  # –ï—Å–ª–∏ –ø–æ–ª–µ –ø—É—Å—Ç–æ–µ, —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª—é—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
        await callback_query.message.answer("üîë *–í–∞—à –∫–ª—é—á:*", parse_mode="Markdown")
        await callback_query.message.answer(f"`{key_entry.key}`", parse_mode="Markdown")
        await callback_query.message.answer("üìÖ *–ö–ª—é—á –∞–∫—Ç–∏–≤–µ–Ω –¥–æ:*", parse_mode="Markdown")
        await callback_query.message.answer(f"*{payment_date.strftime('%d.%m.%Y')}*", parse_mode="Markdown")

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        admin_message = f"üîë –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback_query.from_user.username} ({tg_id}) –ø–æ–ª—É—á–∏–ª –∫–ª—é—á."
        await callback_query.bot.send_message(ADMIN_ID, admin_message)
        await callback_query.bot.send_message(ADMIN_ID, f"{key_entry.key}")

    else:
        await callback_query.message.edit_text("‚ùå –°–≤–æ–±–æ–¥–Ω—ã—Ö –∫–ª—é—á–µ–π –Ω–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=back_button)


@rt.callback_query(F.data == 'top_up_balance')
async def process_top_up_balance(callback_query: types.CallbackQuery):
    await callback_query.answer()
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –º–µ—Ç–æ–¥–∞ –æ–ø–ª–∞—Ç—ã
    await callback_query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã:", reply_markup=keyboard_pay)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –º–µ—Ç–æ–¥–∞ –æ–ø–ª–∞—Ç—ã "–ö–∞—Ä—Ç–æ–π"
@rt.callback_query(F.data == 'pay_card')
async def process_pay_by_card(callback_query: types.CallbackQuery):
    await callback_query.answer()
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=label, callback_data=f"amount_{data['payload']}")]
        for label, data in pay_amounts.items()
    ] + [
    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back")]  # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
])
    await callback_query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –æ–ø–ª–∞—Ç—ã –∫–∞—Ä—Ç–æ–π:", reply_markup=keyboard)


@rt.callback_query(F.data.startswith("amount_"))
async def process_donation_amount(callback_query: types.CallbackQuery):
    await callback_query.answer()

    payload = callback_query.data.replace("amount_", "")
    option = next((v for v in pay_amounts.values() if v["payload"] == payload), None)

    if not option:
        await callback_query.message.answer("–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—É–º–º—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–≤–æ–π—Å
    prices = [LabeledPrice(label=f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ {option['amount']}‚ÇΩ", amount=option["amount"] * 100)]

    await callback_query.bot.send_invoice(
        chat_id=callback_query.message.chat.id,
        title="–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞",
        description=f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ {option['amount']}‚ÇΩ",
        payload=option["payload"],
        provider_token=PAYMENT_PROVIDER_TOKEN,
        currency="RUB",
        prices=prices,
        start_parameter="donation"
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –º–µ—Ç–æ–¥–∞ –æ–ø–ª–∞—Ç—ã "–ó–≤–µ–∑–¥–∞–º–∏"
@rt.callback_query(F.data == 'pay_stars')
async def process_pay_by_stars(callback_query: types.CallbackQuery):
    await callback_query.answer()
    prices = [
        types.LabeledPrice(label="1 –º–µ—Å-–ü–æ–¥–ø–∏—Å–∫–∞", amount=50)  # –£–∫–∞–∂–∏—Ç–µ –Ω—É–∂–Ω—É—é —Å—É–º–º—É
    ]
    await callback_query.bot.send_invoice(
        chat_id=callback_query.from_user.id,
        title="–û–ø–ª–∞—Ç–∞ –∫–ª—é—á–∞",
        description="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 1 –º–µ—Å.",
        payload='Stars_50',  # –ú–æ–∂–µ—Ç –±—ã—Ç—å –ª—é–±–æ–π, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–∫—É–ø–∫–∏
        provider_token="",
        currency="XTR",  # –í–∞–ª—é—Ç–∞ Stars
        prices=prices,
        start_parameter="payment",
        provider_data=None
    )
    # await callback_query.message.answer("–ù–∞–∂–º–∏—Ç–µ '–ù–∞–∑–∞–¥' –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞", reply_markup=back_button)


@rt.callback_query(F.data == 'back')
async def process_back(callback_query: types.CallbackQuery):
    await callback_query.answer()

    user_id = callback_query.from_user.id
    existing_user = User.get_or_none(User.tg_id == user_id)
    balance = existing_user.balance if existing_user else 0  # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º
    await callback_query.message.edit_text(
        f"üí∞ –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance}‚ÇΩ",
        reply_markup=keyboard_main
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ pre_checkout_query (–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã)
@rt.pre_checkout_query()
async def pre_checkout_query(event: PreCheckoutQuery):
    await event.answer(True)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã
@rt.message(F.successful_payment)
async def successful_payment_handler(message: types.Message):
    user_id = message.from_user.id
    payload = message.successful_payment.invoice_payload

    # üîπ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    existing_user = User.get_or_none(User.tg_id == user_id)
    if not existing_user:
        await message.answer("‚ö† –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        return

    # üîπ –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
    amount = PAYMENT_OPTIONS.get(payload)
    if amount is None:
        await message.answer("‚ö† –û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø–ª–∞—Ç–µ–∂–∞.")
        return

    # üîπ –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
    existing_user.balance += amount
    existing_user.save()

    # üîπ –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–±–µ–∑ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –±–æ–Ω—É—Å–∞)
    await message.answer(
        f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n"
        f"üí∞ –ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount}‚ÇΩ"
    )

    await message.answer(
        f"üí∞ –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {existing_user.balance}‚ÇΩ",
        reply_markup=keyboard_main
    )


@rt.callback_query(F.data == "my_keys")
async def process_callback_button2(callback_query: types.CallbackQuery):
    await callback_query.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏
    tg_id = str(callback_query.from_user.id)  # Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å—Ç—Ä–æ–∫–∞)

    try:
        keys_query = Key.select().where(Key.comments == tg_id)  # –ü–æ–∏—Å–∫ –∫–ª—é—á–µ–π
        if keys_query.exists():  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–ª—é—á–∏
            await callback_query.message.answer("üîë –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–ª—é—á–∏:")  # –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            for key in keys_query:
                await callback_query.message.answer(key.key)  # –ö–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ
        else:
            await callback_query.message.edit_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π.", reply_markup=back_button)

    except Exception as e:
        await callback_query.message.answer("‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–ª—é—á–µ–π.")
        print(f"–û—à–∏–±–∫–∞ –≤ process_callback_button2: {e}")


@rt.message(Command('add_keys'))
async def add_keys(message: types.Message):
    try:
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–π –æ—Ç 240 –¥–æ 250
        for i in range(240, 251):
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª—é—á –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "KEY240")
            key_value = f"KEY{i}"

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á –≤ —Ç–∞–±–ª–∏—Ü—É Key, –æ—Å—Ç–∞–≤–ª—è–µ–º comments –ø—É—Å—Ç—ã–º
            key_entry = Key.create(key=key_value, comments="")
            print(f"‚úÖ –ö–ª—é—á {key_value} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.")

        await message.answer("üîë –ö–ª—é—á–∏ –æ—Ç 240 –¥–æ 250 —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã.")

    except Exception as e:
        await message.answer("‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–ª—é—á–µ–π.")
        print(f"–û—à–∏–±–∫–∞ –≤ add_keys: {e}")


# @rt.message(Command('refund'))
# async def ref_pay(message: types.Message):
#     # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –∫–æ–º–∞–Ω–¥—É –∏ –∞—Ä–≥—É–º–µ–Ω—Ç
#     args = message.text.split()
#     if len(args) != 2:
#         # –ï—Å–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –Ω–µ—Ç –∏–ª–∏ –∏—Ö —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ
#         await message.answer("‚ö† –û—à–∏–±–∫–∞: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ /refund <ID>")
#         return
#
#     # –ö–æ–º–∞–Ω–¥–∞ –∏ ID
#     command = args[0]
#     payment_id = args[1]
#
#     try:
#         # –ó–¥–µ—Å—å –≤–∞—à –∫–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞
#         await message.bot.refund_star_payment(message.from_user.id, payment_id)
#         await message.answer(f"‚úÖ –í–æ–∑–≤—Ä–∞—Ç –¥–ª—è ID {payment_id} –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω.")
#     except Exception as e:
#         await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ: {e}")


@rt.callback_query(F.data == 'pref')
async def process_pref_command(callback: types.CallbackQuery):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º
    await callback.message.answer("üìå –ö–∞–∫–æ–π —É –≤–∞—Å —Ç–µ–ª–µ—Ñ–æ–Ω?", reply_markup=tel_pref)


@rt.callback_query(F.data == "pref_iphone")
async def process_iphone_pref(callback_query: types.CallbackQuery):
    await callback_query.answer()
    await callback_query.message.answer(iphone_pref)  # –í—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ config.py
    await callback_query.bot.send_photo(callback_query.from_user.id, photo=types.FSInputFile(image_path_iphone))


@rt.callback_query(F.data == "pref_android")
async def process_android_pref(callback_query: types.CallbackQuery):
    await callback_query.answer()
    media_and = [
        types.InputMediaPhoto(media=FSInputFile(image_path_android1)),  # –ü–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ
        types.InputMediaPhoto(media=FSInputFile(image_path_android2)),  # –í—Ç–æ—Ä–æ–µ —Ñ–æ—Ç–æ
    ]
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É
    await callback_query.message.answer(android_pref)  # –í—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ config.py
    await callback_query.bot.send_media_group(callback_query.from_user.id, media_and)


@rt.callback_query(F.data == "info")
async def process_callback_button1(callback_query: types.CallbackQuery):
    await callback_query.answer()
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await callback_query.message.edit_text(main_info, parse_mode='HTML', reply_markup=back_button)

@rt.message(Command("oferta"))
async def oferta_cmd(message: types.Message):
    await message.answer("–û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –æ—Ñ–µ—Ä—Ç–æ–π –ø–æ —Å—Å—ã–ª–∫–µ: https://telegra.ph/Oferta-03-13-2")


@rt.message(Command("help"))
async def process_help_command(message: types.Message, state: FSMContext):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.")
    await state.set_state(HelpState.waiting_for_question)


@rt.message(HelpState.waiting_for_question)
async def receive_question(message: types.Message, state: FSMContext):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_question:{message.from_user.id}")],
        [InlineKeyboardButton(text="–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"ignore_question:{message.from_user.id}")]
    ])
    admin_message = f"üì© –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.username} ({message.from_user.id}):\n{message.text}"
    await message.bot.send_message(ADMIN_ID, admin_message, reply_markup=keyboard)
    await message.answer("–í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!")
    await state.clear()


@rt.callback_query(F.data.startswith("reply_question:"))
async def reply_question(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()
    try:
        _, user_id_str = callback_query.data.split(":", 1)
        user_id = int(user_id_str)
    except (ValueError, IndexError):
        await callback_query.message.answer("‚ö† –û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.")
        return

    await state.update_data(user_id=user_id)
    await callback_query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:")
    await state.set_state(HelpState.waiting_for_admin_reply)


@rt.message(HelpState.waiting_for_admin_reply)
async def send_reply(message: types.Message, state: FSMContext):
    data = await state.get_data()
    user_id = data.get("user_id")
    if user_id:
        await message.bot.send_message(user_id, f"üì© –û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n{message.text}")
        await message.answer("–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
    else:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    await state.clear()


@rt.callback_query(F.data.startswith("ignore_question:"))
async def ignore_question(callback_query: types.CallbackQuery):
    await callback_query.answer()
    await callback_query.message.edit_text("‚úÖ –í–æ–ø—Ä–æ—Å –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω.")
